<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Porting Printing to Zephyr - GSoC 2025</title>
    <link>https://HubertYGuan.github.io/GSoC-2025/</link>
    <description>Recent content on Porting Printing to Zephyr - GSoC 2025</description>
    <image>
      <title>Porting Printing to Zephyr - GSoC 2025</title>
      <url>https://HubertYGuan.github.io/GSoC-2025/images/openprintingzephyr.png</url>
      <link>https://HubertYGuan.github.io/GSoC-2025/images/openprintingzephyr.png</link>
    </image>
    <generator>Hugo -- 0.147.6</generator>
    <language>en-us</language>
    <copyright>Hubert Guan, OpenPrinting, Zephyr</copyright>
    <lastBuildDate>Sun, 06 Jul 2025 20:17:23 -0700</lastBuildDate>
    <atom:link href="https://HubertYGuan.github.io/GSoC-2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 3: PDFio and zlib Updates</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week3/</link>
      <pubDate>Sun, 06 Jul 2025 20:17:23 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week3/</guid>
      <description>&lt;p&gt;This week marks the point where zlib and PDFio are wrapped up for now. This update is fairly short since there has not been a lot of new stuff going on this week, since most of the work has been with testing, and I celebrated Independence Day last Friday.&lt;/p&gt;
&lt;p&gt;I can now proudly say that zlib passes the provided &lt;code&gt;example&lt;/code&gt; and &lt;code&gt;infcover&lt;/code&gt; tests at least on the ESP32. Luckily, I did not have to go digging around in GDB very much since the problems seemed to just be in the compile options and library choice. Now that I have enforced the &lt;code&gt;_POSIX_C_SOURCE&lt;/code&gt; parameter and switched to newlib, things have been going fine so far.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 2: PDFio and zlib Continued</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week2/</link>
      <pubDate>Sun, 29 Jun 2025 21:40:07 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week2/</guid>
      <description>&lt;p&gt;This week was mainly a continuation of my work during week 1. I continued work on zlib by conducting more rigorous testing, covering the relevant tests within the default CMakeLists. Overall, I think that zlib is mostly functional at the current state and should provide general compression and decompression functionality.&lt;/p&gt;
&lt;h1 id=&#34;notes-on-zlib&#34;&gt;Notes on zlib&lt;/h1&gt;
&lt;p&gt;There are still some things to keep in mind on the current state of zlib; first of which is building the test application, especially since I have to use a file system like littlefs. In &lt;code&gt;gzlib.c&lt;/code&gt; and related source files for “gz” prefixed functions, file i/o functionality is required, and I figured that littlefs would be a good fit since it is designed for use in embedded applications. However, it seems that some platforms, such as my &lt;code&gt;native_sim&lt;/code&gt; and &lt;code&gt;qemu_riscv64/32&lt;/code&gt;, struggle with building the application with littlefs or with interacting with the filesystem. I have found that real hardware (i.e., the ESP32) works the best for building and running the application. However, the application still fails two coverage tests (&lt;code&gt;cover_wrap&lt;/code&gt; and &lt;code&gt;cover_back&lt;/code&gt;) in the provided CMake tests. Therefore, I will have to look into OpenOCD so I can get a debugger running. On the other hand, I’m able to pass all the tests not involving file i/o on native_sim, likely since there are differences between the C libraries on &lt;code&gt;native_sim&lt;/code&gt; and other platforms (e.g., I think I am able to include header files on my system but not in the Zephyr libc). Another factor to keep in mind is that I also decreased the parameters for max LZ77 window bits and default memory level to avoid a heap overflow on my ESP32. Lastly, I have a few remarks on the Kconfig option &lt;code&gt;CONFIG_POSIX_API&lt;/code&gt;. Although this &lt;a href=&#34;https://docs.zephyrproject.org/latest/services/portability/posix/overview/index.html&#34;&gt;page&lt;/a&gt; states that the option should not be used for new Zephyr applications, the truth is that &lt;code&gt;unistd.h&lt;/code&gt; still uses a &lt;code&gt;#ifdef CONFIG_POSIX_API&lt;/code&gt; block around some important functions like &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, etc. Therefore, I have set the option as a dependency for zlib.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 1: PDFio and zlib</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week1/</link>
      <pubDate>Sat, 21 Jun 2025 18:05:27 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week1/</guid>
      <description>&lt;p&gt;Now that this inaugural week is done, I have some time to reflect on what I’ve learned and what did/did not go well. I’ve learned that I definitely work best at the beginning of my day, as I can basically devote my time entirely to the project for a few hours before dealing with other things and working more intermittently throughout pretty much the rest of the day. However, there are some things that can distract me from keeping up the momentum for those first few hours. Therefore, I think that starting work earlier and adapting my environment to be free of those distractions is something I should look towards.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Porting Printing to Zephyr</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/intro/</link>
      <pubDate>Tue, 27 May 2025 15:17:36 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/intro/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;OpenPrinting and Zephyr&#34; loading=&#34;lazy&#34; src=&#34;https://HubertYGuan.github.io/GSoC-2025/images/openprintingzephyr.png#center&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;about-the-project&#34;&gt;About the Project&lt;/h1&gt;
&lt;p&gt;Printers are a technology that we often think should “just work,” but in reality, there are often many hoops to jump through when dealing with a printer’s drivers. It is a common experience when dealing with printers to struggle to get a document printed when trying every which way on an OS like modern Windows, but then all the problems suddenly disappear when using an Apple device. This is in large part thanks to Apple’s AirPrint, which is the oldest and most widely supported driverless printing protocol. The driverless nature is important as it prevents the issue of having printer drivers that may not be updated to support the user’s current operating system. However, AirPrint is not an open standard, and only Apple operating systems are designed with it in mind. This leads us to IPP Everywhere, a driverless printing protocol that is an open standard, and its pivotal role in the modern open-source printing stack developed by OpenPrinting. This would theoretically allow any operating system that supports the printing stack to print, as long as the printer supports IPP Everywhere.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
