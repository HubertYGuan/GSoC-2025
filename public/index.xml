<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Porting Printing to Zephyr - GSoC 2025</title>
    <link>https://HubertYGuan.github.io/GSoC-2025/</link>
    <description>Recent content on Porting Printing to Zephyr - GSoC 2025</description>
    <image>
      <title>Porting Printing to Zephyr - GSoC 2025</title>
      <url>https://HubertYGuan.github.io/GSoC-2025/images/openprintingzephyr.png</url>
      <link>https://HubertYGuan.github.io/GSoC-2025/images/openprintingzephyr.png</link>
    </image>
    <generator>Hugo -- 0.147.6</generator>
    <language>en-us</language>
    <copyright>Hubert Guan, OpenPrinting, Zephyr</copyright>
    <lastBuildDate>Mon, 18 Aug 2025 18:35:30 -0700</lastBuildDate>
    <atom:link href="https://HubertYGuan.github.io/GSoC-2025/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Week 9: Debugging and mDNS Responder</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week9/</link>
      <pubDate>Mon, 18 Aug 2025 18:35:30 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week9/</guid>
      <description>&lt;p&gt;This week has definitely been less straightforward than the previous weeks as I continue testing libcups and figuring out a clear path forward for what needs to be ported and what can be left out. I have continued with getting through the other tests for libcups (at least the ones relevant to the print server application), exploring mDNS Responder use in libcups, and I have also been working on getting OpenOCD debugging with my debugger board.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 8: libcups Updates</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week8/</link>
      <pubDate>Mon, 11 Aug 2025 12:35:23 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week8/</guid>
      <description>&lt;p&gt;As I alluded to in my previous post, I am now back in Santa Barbara (or rather Goleta). This means I have some additional resources from my lab and professors, but also a lot of additional responsibilities from my classes, dealing with my apartment, etc. This means that I will have a smaller amount of time to work on GSoC, but I will make sure to work on the project as much as I can and continue to keep you all updated.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 7: Midterm Update</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week7/</link>
      <pubDate>Mon, 04 Aug 2025 14:08:05 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week7/</guid>
      <description>&lt;p&gt;Now that midterm evaluations have come out, it is time to reflect on my experiences and the progress that I’ve made. Overall, I am proud of the progress that I have made, but I know that there is a lot more work left to do. For this week, I have been able to get a test suite running for libcups. However, there is a lot more testing to be done since libcups is a lot more complex and less self-contained than other libraries like zlib or pdfio.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 6: More Progress on libcups</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week6/</link>
      <pubDate>Mon, 28 Jul 2025 21:10:09 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week6/</guid>
      <description>&lt;p&gt;Although libcups has been the most challenging project to port and has taken a lot longer than I initially thought, I feel like I am finally a lot closer to getting the library operational. Even though I am not quite done with getting everything prepared for compilation unlike what I said I would do earlier, I have gone through and added code for all of the parts where Mbed TLS is needed.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 5: libcups Continued</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week5/</link>
      <pubDate>Mon, 21 Jul 2025 16:56:01 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week5/</guid>
      <description>&lt;p&gt;This week was again spent mostly on refactoring libcups to support Mbed TLS, and besides some slight issues, I should be able to finish implementing it soon and then make some additional header files (or forks) to implement the rest of the functionality needed from libc and mDNS Responder so that I can get a test application to compile. Another thing to note is that I feel like I have learned a lot about TLS and cryptography just from working with Mbed TLS. I used to not pay too much attention to the field of cryptography in my work and research, but now I realize more and more that cryptography is definitely relevant to this field of embedded systems and my research in computer architecture.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 4: libcups and Dependencies</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week4/</link>
      <pubDate>Mon, 14 Jul 2025 11:52:45 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week4/</guid>
      <description>&lt;p&gt;I want to start by saying that porting libcups is significantly more complex than porting zlib or PDFio, and I was definitely wrong in saying that I could port it quickly. Although setting up the build scripts and environment is relatively simple, like with zlib and PDFio, I also have to make significant additions and changes to the source code in multiple libraries.&lt;/p&gt;
&lt;h1 id=&#34;mbed-tls&#34;&gt;Mbed TLS&lt;/h1&gt;
&lt;p&gt;The first challenge comes in the form of Zephyr’s TLS library, Mbed TLS. Since the design methodologies of OpenSSL, GNU TLS, and Mbed TLS differ, I first had to modify Mbed TLS to expose previously static functions (mainly for &lt;code&gt;cupsAreCredentialsValidForName&lt;/code&gt;). Since the contributors didn’t want users to have access to functions like &lt;code&gt;x509_crt_verify_name&lt;/code&gt; that are practically needed to implement some of the libcups functions (maybe due to security concerns), this sort of modification is unofficial and can be quite murky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 3: PDFio and zlib Updates</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week3/</link>
      <pubDate>Sun, 06 Jul 2025 20:17:23 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week3/</guid>
      <description>&lt;p&gt;This week marks the point where zlib and PDFio are wrapped up for now. This update is fairly short since there has not been a lot of new stuff going on this week, since most of the work has been with testing, and I celebrated Independence Day last Friday.&lt;/p&gt;
&lt;p&gt;I can now proudly say that zlib passes the provided &lt;code&gt;example&lt;/code&gt; and &lt;code&gt;infcover&lt;/code&gt; tests at least on the ESP32. Luckily, I did not have to go digging around in GDB very much since the problems seemed to just be in the compile options and library choice. Now that I have enforced the &lt;code&gt;_POSIX_C_SOURCE&lt;/code&gt; parameter and switched to newlib, things have been going fine so far.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 2: PDFio and zlib Continued</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week2/</link>
      <pubDate>Sun, 29 Jun 2025 21:40:07 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week2/</guid>
      <description>&lt;p&gt;This week was mainly a continuation of my work during week 1. I continued work on zlib by conducting more rigorous testing, covering the relevant tests within the default CMakeLists. Overall, I think that zlib is mostly functional at the current state and should provide general compression and decompression functionality.&lt;/p&gt;
&lt;h1 id=&#34;notes-on-zlib&#34;&gt;Notes on zlib&lt;/h1&gt;
&lt;p&gt;There are still some things to keep in mind on the current state of zlib; first of which is building the test application, especially since I have to use a file system like littlefs. In &lt;code&gt;gzlib.c&lt;/code&gt; and related source files for “gz” prefixed functions, file i/o functionality is required, and I figured that littlefs would be a good fit since it is designed for use in embedded applications. However, it seems that some platforms, such as my &lt;code&gt;native_sim&lt;/code&gt; and &lt;code&gt;qemu_riscv64/32&lt;/code&gt;, struggle with building the application with littlefs or with interacting with the filesystem. I have found that real hardware (i.e., the ESP32) works the best for building and running the application. However, the application still fails two coverage tests (&lt;code&gt;cover_wrap&lt;/code&gt; and &lt;code&gt;cover_back&lt;/code&gt;) in the provided CMake tests. Therefore, I will have to look into OpenOCD so I can get a debugger running. On the other hand, I’m able to pass all the tests not involving file i/o on native_sim, likely since there are differences between the C libraries on &lt;code&gt;native_sim&lt;/code&gt; and other platforms (e.g., I think I am able to include header files on my system but not in the Zephyr libc). Another factor to keep in mind is that I also decreased the parameters for max LZ77 window bits and default memory level to avoid a heap overflow on my ESP32. Lastly, I have a few remarks on the Kconfig option &lt;code&gt;CONFIG_POSIX_API&lt;/code&gt;. Although this &lt;a href=&#34;https://docs.zephyrproject.org/latest/services/portability/posix/overview/index.html&#34;&gt;page&lt;/a&gt; states that the option should not be used for new Zephyr applications, the truth is that &lt;code&gt;unistd.h&lt;/code&gt; still uses a &lt;code&gt;#ifdef CONFIG_POSIX_API&lt;/code&gt; block around some important functions like &lt;code&gt;read()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, etc. Therefore, I have set the option as a dependency for zlib.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Week 1: PDFio and zlib</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/week1/</link>
      <pubDate>Sat, 21 Jun 2025 18:05:27 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/week1/</guid>
      <description>&lt;p&gt;Now that this inaugural week is done, I have some time to reflect on what I’ve learned and what did/did not go well. I’ve learned that I definitely work best at the beginning of my day, as I can basically devote my time entirely to the project for a few hours before dealing with other things and working more intermittently throughout pretty much the rest of the day. However, there are some things that can distract me from keeping up the momentum for those first few hours. Therefore, I think that starting work earlier and adapting my environment to be free of those distractions is something I should look towards.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Porting Printing to Zephyr</title>
      <link>https://HubertYGuan.github.io/GSoC-2025/posts/intro/</link>
      <pubDate>Tue, 27 May 2025 15:17:36 -0700</pubDate>
      <guid>https://HubertYGuan.github.io/GSoC-2025/posts/intro/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;OpenPrinting and Zephyr&#34; loading=&#34;lazy&#34; src=&#34;https://HubertYGuan.github.io/GSoC-2025/images/openprintingzephyr.png#center&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;about-the-project&#34;&gt;About the Project&lt;/h1&gt;
&lt;p&gt;Printers are a technology that we often think should “just work,” but in reality, there are often many hoops to jump through when dealing with a printer’s drivers. It is a common experience when dealing with printers to struggle to get a document printed when trying every which way on an OS like modern Windows, but then all the problems suddenly disappear when using an Apple device. This is in large part thanks to Apple’s AirPrint, which is the oldest and most widely supported driverless printing protocol. The driverless nature is important as it prevents the issue of having printer drivers that may not be updated to support the user’s current operating system. However, AirPrint is not an open standard, and only Apple operating systems are designed with it in mind. This leads us to IPP Everywhere, a driverless printing protocol that is an open standard, and its pivotal role in the modern open-source printing stack developed by OpenPrinting. This would theoretically allow any operating system that supports the printing stack to print, as long as the printer supports IPP Everywhere.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
